Notas git actualizando la copia  :)

*/nota de la clase 2/*
// es necesario tener una configuracion adecuada para crear commit:
git config sirve para mostrar como funciona.
git conofig --list sirve para mostrar una lista para ver la configuracion por defecto de tu git y las cosas que faltan.
git config --list --show-origin sirve para ver donde esta guardadas las configuraciones.
git config --global user.name "nombre" sirve para cambiar configuraciones globales como el nombre de usuario.
git config --global user.email "correo" sirve para cambiar la configuracion del correo.
" dato :un - indica letras para acceder rapido a un comando, -- indica una palabra"

*/notas 1, clase 1 introduccion a la terminal/*
*/ git bash, es la terminal que abriremos /*
// comandos:
pwd sirve para ver en que carpeta estamos.
cd + / sirve para ubicarte en el home, del disco curo.
ls sirve para listar los archivos que tengo en la raiz.
ls -l sirve para mostrar los archivos.
ls -al sirve para traer  argumentos especiales al comando incluso los ocultos.
ls -a srive para mostrar los archivos pero agrupados no en lista como el anterior.
clear sirve para limpiar la consola.
ctrl l sirve para limpiar la consola.
cd /c sirve para ubicarte dentro del disco duro.
cd user sirve para ubicarte en la carpeta de usuario dentro del disco duro c.
cd .. sirve para volver a la carpeta anterior.
mkdir sirve para crear una carpeta.
touch sirve para crear archivos vacios.
cd . especifica la carpeta actual.
cat sirve para mostrar el contenido de un archivo.
history sirve para mostrat todos los comandos realizados
!#deComandoRealizado sirve para repetir un comando ya realizado en history.
rm "archivo" sirve para borrar un archivo.
comando --help sirve para mostrar una serie de explicaciones de como funciona cada uno de los comandos.//

*/investigacion/*
*/ ¿Cómo eliminar completamente un repositorio git creado con init? /*
// para borrar un directorio o carpeta .git
donde se encuentra el repositorio se usa el comando 
rm -rf .git     "es importante estar en la carpeta
donde se encuentra el proyecto. 
https://www.web-dev-qa-db-es.com/es/git/como-eliminar-completamente-un-repositorio-git-creado-con-init/967436662/
//




*/ notas 2 , clase 2,  continuacion creacion de repositorio y primer commit/* 
// comandos:
git init sirve para crear un repositorio y este se crea en la carpeta donde se desarrollara el proyecto.
code se puede escribir code en git bash para abrilo.
git status sirve para ver el estado del proyecto.
git add "archivo" sirve para agregar los cambios realizados.
git rm sirve para sacar un archivo o documento, es decir borrarlo.
git rm --cached sirve para borrar el add de un archivo, es decir volver al estado inicial.
git commit -m "mensaje" sirve para agregar al repositorio los cambios realizados, -m hace referencia a un mensaje que dejaremos en el repositorio para quienes deseen ver que ocurrio o por que se hizo el cambio.
code "archivo" sirve para abrir de manera directa el archivo.
git add . sirve para agregar todos los archivos y cambios realizados dentro de la carpteta. el "." hace referencia a la carpeta actual.
git log "archivo" sirve para ver la historia del archivo, como cambios realizados.

* comentarios: el numero largo que parece a lado del commit en un git log 
es un codigo que hace referencia al archivo modificado,es la manera en que se identifica ese cambio 
el head master hace referencia a que ese es el archivo que esta actualmente guardado y es la version final.


*/ notas 3 , clase 3,  continuacion analisis de cambios en archivos/* 
// comandos:
git show "archivo" sirve para mostrar los cambios que ha tenido un archivo.
scape shift zz sirve para salir del commit cuando no se mando un mensaje y fuerza el commit para env.
git diff "copiar indicador commit + espacio + copiar indicador commit a comparar" sirve para comparar versiones entre commits.


*/ notas 4 , clase 4,  reset y checkout/* 
// comandos:
git reset "codigo commit" --hard sirve para volver a una version anterior del archivo, con el hard todo vuelve a la version anterior.
git reset "codigo commit" --soft sirve para para volver a la version anterio pero lo que se tenga en stagin sigue ahi.
git checkout "master o codigo indicador commit" + "nombre archivo"
git log --stat "sirve para ver cambios.


*/ notas 5 , clase 5,  git reset vs git rm/* 
// documento copiado de la clase:

rm "nombre del archivo" se pueden eliminar archivos.
git rm
Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones.
Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar
el último commit antes de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git 
cómo eliminar los archivos que ya no necesitamos en la última versión del proyecto:


git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. 
Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.

git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, 
or lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

git reset Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver.
Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

Este comando es muy peligroso y debemos emplearlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de utilizar git reset: 
con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). 
O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.

git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging,
así podemos aplicar las últimas actualizaciones a un nuevo commit.

git reset --hard: Borra todo. Todo todito, absolutamente todo. 
Toda la información de los commits y del área de staging se borra del historial.

¡Pero todavía falta algo!

git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, 
solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y 
los incluyamos de nuevo en staging con git add, por supuesto. //


" comentarios : stagin es donde estan los cambios, papra agregaro al repositorio se tiene que usar el commit"


*/ notas 6 , clase 6 flujo de trabajo basico en repositorio  /* 
// comentarios:
git clon url
sirve para obetenr un archivo de un repositorio remoto, 
y traerlo al directorio de trabajo y a tu repositorio local.
para guardar cambios se sigue guardadno con git add . y git commit,
pero para enviarlos el repositorio remoto se utiliza:
git push sirve para enviar el head master al servidor remoto.
git fetch sirve para traer una actualizacion del repositorio remoto al local, pero no lo copia en los archivos.
git merge para copiarlo en los archivos hay que fucionar los archivos. despues del git fetch.
git pull sirve para tener la copia actualizada de repositorios y directorio.


notas 7, clase 7 introduccion a las ramas.
branch "nombre de la rama a crear" sirve para crear una rama diferente a la rama master, esta es una copia de la mismia, 
sin embargo ahora funcionaran como 2 versiones diferentes en las que puedes trabajar.

git checkout: para cambiar entre ramas se utiliza el git checkout "nombre de la rama a trabajar".

ejemplo :
git checkout master (rama principal);
git checkout copiamaster (rama secundaria);

es importante que al hacer cambios dentro de una de las ramas se guarden los cambios
con git add . o git commit -am "mensjae".

git merge sirve para funcionar las ramas principal y secundaria.
es necesario realizar el merge dentro de la rama que se desea que sea la principal.


*/ notas 8, clase uso de git hub*/
// apuntes: GitHub.
primeroo; crear nuevo repositorio.
segundo; llenar, nombre de repositorio, publico o privado, inicializar con readme.

como enviar la informacion a githunb.

copiar url https de github, para colocarlo en la terminal.
git remote add origin  "+url git hub del repositorio" ; sirve para añadir el origen al master.
git remote; para ver que existe el origin.
git remote -v; sirve para vizualizar el fetch y el push de origin.
git push origin master; sirve para enviar al origen la rama master.
puede salir una ventana de inicio de sesion. puede salir un error por que no se tienen las mismas hisotiras, y 
esto se debe a que se creo un nuevo master en git hub.
se soluciona con:
git pull origin master; para enviar las historias commit.
puede salir una advertencia por que no hay commits comunes, se soluciona con:
git pull origin master --allow-unrelated-histories; srive para fucionar estos archivos y asi poder hacer el merge.
de esta manera traera el readme.md que se puede vizualizar con el ls -al
despues de esto se puede hacer el : 
git push origin master. 

se puede modificar el archivo desde github, seleccionando editar archivo, 
recuerda dejar descripcion de commit antes de enviar la informacion desde github. 
importante actualizar la consola con git pull origin master para traer la informacion desde 
github. para enviar la informacion de la consola a github se usa el git push origin master.


*/clase 9, llave spublicas y privadas./*
configurar tus llaves publicas y privadas.
las llaves se conectan con el protocolo ssh

para crear la llave, crearla desde cd home.
comando: ssh-keygen -t -rsa -b 4096 -C "correo"
las llaves se debebn guardad en una nueva carpeta .ssh, desde ahi se copian.
para ver que las llaves esten corriendo, comando:
$ eval $(ssh-agent -s)
luego se agrega la llave.
colocar signo de la ñ; se pone con alt + tecla corcho cierre. ~
comnado para agragar la llave:
ssh-add ~/.ssh/id_rsa


clase 10, tags iy versiones:

git log --all --graph; sirve para ver el historial de los branches.
git log --all --graph --decorate --oneline; muestra todo mas comprimido.

se pueden crear alias a los comandos usando:
ejemplo;
alias arbol="git log --all --graph --decorate --oneline"
agregando tags a commits para encontarlos mas rapido:
git tag -a "nombre" -m "resultado ....."  "copias el hash para el tag  4f0a0e0 "
ejmplo: git tag -a v0.1 -m " resultado anterior de una version del curso" 84f8a2d
git tag; sirve para ver la lista de los tag que tenemos.
git show-ref --tags; sirve para ver a que estan conectados los tags.
git push origin --tags; sirve para enviar los tags a github.
git tag -d "nombre_tag" ; para borrar un tag de manera interna.
git push origin :refs/tags/"nombre_tag" ; sirve para borralo en github.



clase 11, manejo de ramas en github.
git branch; ver ramas
git checkout moverse entre ramas.
git show-branch; ramas qque existen y su historia
git show-branch --all; sirve para ver las ramas que existen y su historia pero con mas datos.
gitk; abre en un software la historia de una manera super vizual.
para empujar las ramas al origin es:
ubicarse en la rama con git chekout.
traer la version de origin con git pull origin master y luego enviar con 
git push origin "rama" ; la rama a enviar.


git clone para pegar un url https desde github para copiar un proyecto.
git branch header; ramas
git branch footer; ramas

clase 12, haciendo merge de ramas.
imagenes; son archivos binarios, no se deberian agregar a repositorios.
normalmente se utiliza otra rama diferente a master para trabajar.
añadir la carpeta imagenes y la imagen de la carpte con:
git add imagenes/"nombre_imagen".png
despues de agregarlo hacer un commit.
traer con git pull origin header los cambios de header, y luego 
enviafr los cambias hechos con guardadnoit push origin header. para envias las
imagenes actualizadas o nuevas imagenes.

clase 13, utilizando pull request en git hub.
ubicarnos en master y hacer el pull de origin master, la ultima version que hay en git hub.
crear nueva rama para agregar un error:
git branch fix-typo; nueva rama.
git branch para ver si se creo la rama.
git checkout para ir a la nueva rama.
despues de esto los cambios relizados se chekan con el pull request
en github, ahi hacemos la comparacion y solicitamos el merge de la rama.


clase 14, fork
fork sirve papra clonar el proyecto desde git hub, despues de clonar es necesario
agrgarlo a la terminal de comando. usando el git clone copiando la url. 


que tal va todo === que pasa con los cambios. 
iniciamos de nuevo 21 de junio.